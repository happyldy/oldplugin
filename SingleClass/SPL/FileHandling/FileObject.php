<?php
/**
 * SplFileObject类为文件提供了一个面向对象接口.
 * implements RecursiveIterator  , SeekableIterator
 *
 *
 * 'r' 只读方式打开，将文件指针指向文件头。
 * 'r+' 读写方式打开，将文件指针指向文件头。
 * 'w' 写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。
 * 'w+' 读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。
 * 'a' 写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。
 * 'a+' 读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。
 * 'x' 创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建之。这和给底层的 open(2) 系统调用指定 O_EXCL|O_CREAT 标记是等价的。
 * 'x+' 创建并以读写方式打开，其他的行为和 'x' 一样。
 * 'c' Open the file for writing only. If the file does not exist, it iscreated. If it exists, it is neither truncated (as opposed to 'w'), nor the call to this function fails (as isthe case with 'x'). The file pointer ispositioned on the beginning of the file. This may be useful if it'sdesired to get an advisory lock (see flock())before attempting to modify the file, as using 'w' could truncate the file before the lockwas obtained (if truncation is desired, ftruncate() can be used after the lock isrequested).
 * 'c+' Open the file for reading and writing; otherwise it has the samebehavior as 'c'.
 *
 * Note:为移植性考虑，打开文件时总是使用 'b' 标记。
 *
 */


namespace HappyLin\OldPlugin\SingleClass\SPL\FileHandling;


use SplFileInfo, SplFileObject;


class FileObject extends SplFileObject
{


    public function __construct($filename, $mode = 'rb', $useIncludePath = false, $context = null)
    {
        parent::__construct($filename, $mode, $useIncludePath, $context);
    }



    /**
     * 设置要由 SplFileObject 使用的标志。
     *
     * $flags
     *  SplFileObject::DROP_NEW_LINE
     *      在行尾删除换行符。
     *  SplFileObject::READ_AHEAD
     *      Read on rewind/next. 在倒带/下一个时阅读。
     *  SplFileObject::SKIP_EMPTY
     *      跳过文件中的空行。 这需要启用 READ_AHEAD 标志，才能按预期工作。
     *  SplFileObject::READ_CSV
     *      将行读取为 CSV 行。
     *
     *
     * @param int $flags 要设置的标志的位掩码。 有关可用标志，请参阅 SplFileObject 常量。
     */
    public function setFlags($flags):void
    {
        parent::setFlags($flags); // TODO: Change the autogenerated stub
    }

    /**
     * 获取为 SplFileObject 实例设置的标志作为 int。
     * @return int|void
     */
    public function getFlags()
    {
        return parent::getFlags();
    }


    /**
     * 设置要读取的行的最大长度。
     * @param int $maxLength 一行的最大长度。
     * @throws DomainException 当 max_len 小于零时抛出 DomainException。
     */
    public function setMaxLineLen($maxLength) : void
    {
        parent::setMaxLineLen($maxLength); // TODO: Change the autogenerated stub
    }


    /**
     * 获取由 SplFileObject::setMaxLineLen() 设置的最大行长度。
     * @return int 如果使用 SplFileObject::setMaxLineLen() 设置了最大行长度，则返回最大行长度，默认值为 0。
     */
    public function getMaxLineLen(): int
    {
        parent::getMaxLineLen();
    }


    /**
     * 判断是否到达文件尾
     * @return bool 如果文件位于 EOF，则返回 TRUE，否则返回 FALSE。
     */
    public function eof(): bool
    {
        return parent::eof();
    }


    /**
     * 输出文件指针上的所有剩余数据
     * @return int 返回从句柄读取并传递到输出的字符数。
     */
    public function fpassthru():int
    {
        return parent::fpassthru();
    }


    /**
     * 将字符串的内容写入文件
     * @param string $data 要写入文件的字符串。
     * @param int $length 如果给出了长度参数，则在写入长度字节或到达字符串末尾（以先到者为准）后，写入将停止。
     * @return int | false 返回写入的字节数，或错误时返回 FALSE。
     */
    public function fwrite($data, $length = null)
    {
        if(!isset($length)){
            $length = $data.$length;
        }
        return parent::fwrite($data);
    }

    /**
     * 强制将所有缓冲输出写入文件。
     * @return bool
     */
    public function fflush(): bool
    {
        return parent::fflush();
    }



    /**
     * 从文件中获取一个字符。
     * Warning此函数可能返回布尔值 FALSE，但也可能返回等同于 FALSE 的非布尔值。请阅读 布尔类型章节以获取更多信息。应使用 === 运算符来测试此函数的返回值。
     * @return false|string 返回包含从文件读取的单个字符或 EOF 上的 FALSE 的字符串。
     */
    public function fgetc()
    {
        return parent::fgetc();
    }



    /**
     * 从文件中获取一行。
     * @return false|string 返回包含文件下一行的字符串，或错误时返回 FALSE。
     */
    public function fgets()
    {
        return parent::fgets();
    }



    /**
     * 从文件中读取给定的字节数。
     * @param int $length 要读取的字节数。
     * @return false|string 返回从文件中读取的字符串或者在失败时返回 FALSE。
     */
    public function fread($length)
    {
        return parent::fread($length);
    }

    /**
     * 根据格式解析来自文件的输入
     * 从文件中读取一行并根据指定的格式对其进行解释，这在 sprintf() 的文档中有所描述。
     * 格式字符串中的任何空格都匹配文件行中的任何空格。这意味着即使格式字符串中的制表符 \t 也可以匹配输入流中的单个空格字符。
     *
     *
     * $format
     *  格式字符串由零个或多个指令组成：直接复制到结果的普通字符（不包括%）和转换规范，每个字符都会获取自己的参数。
     *  转换规范遵循以下原型：%[argnum$][flags][width][.precision]说明符。
     *
     *  Argnum
     *  后跟
     *      $ 美元符号的整数，用于指定转换中要处理的数字参数。      例如： %2$s ；第二个字符串参数；
     *      - 在给定的字段宽度内左对齐；右对齐是默认值             例如： %2$-8s; 第二个字符串参数, 左对齐占八个字符；
     *      + 用加号 + 前缀正数； 默认只有负号前缀为负号。         例如： %1$-+04d；第一个字符串参数, 左对齐占四个字符；正整数加正号；
     *      （space）空格用空格填充结果。这是默认设置。
     *      0 只用零填充左边的数字。使用 s 说明符，这也可以用零填充右边。 例如： %04d ；'0004';    %4d ；'   4';
     *      '(char) 用字符 (char) 填充结果。                    例如：%2$'a-8s;  第二个字符串参数, 左对齐，用 a 填充空格
     *
     *  Width
     *      一个整数，表示此转换应产生多少个字符（最少）。
     *
     *  Precision精确度
     *      一段时间 。 后跟一个整数，其含义取决于说明符：                        例如： %1$'0-+4.2f 第一个字符串参数, 左对齐占四个字符；正整数加正号；整数四字符，小数 2 字符
     *      对于 e、E、f 和 Fspecifiers：这是小数点后要打印的位数（默认为 6）。
     *      对于 g 和 Gspecifiers：这是要打印的最大有效数字数。
     *      对于 s 说明符：它充当截止点，设置字符串的最大字符数限制。              列如： %2$'0-8.2s 第二个字符串参数, 左对齐，用 0 填充空格； 占八字符， 限制参数展示 2 字符； 其余 0 填充；
     *
     *      注意：如果指定的周期没有明确的精度值，则假定为 0。
     *      注意：尝试使用大于 PHP_INT_MAX 的位置说明符将生成警告。
     *
     *
     *      %   文字百分比字符。不需要参数。
     *      b   该参数被视为一个整数并表示为一个二进制数。
     *      c   该参数被视为一个整数，并作为带有该 ASCII 的字符表示。
     *      d   参数被视为整数并表示为（有符号的）十进制数。
     *      e   该参数被视为科学记数法（例如 1.2e+2）。自 PHP 5.2.1 起，精度说明符代表小数点后的位数。在早期版本中，它被视为有效数字的数量（少一位）。
     *      E   类似于 e 说明符，但使用大写字母（例如 1.2E+2）。
     *      f   该参数被视为一个浮点数并呈现为一个浮点数（语言环境感知）。
     *      F   该参数被视为浮点数并表示为浮点数（非语言环境感知）。自 PHP 5.0.3 起可用。
     *      g   一般格式。
     *          如果非零，则 P 等于精度，如果精度被省略，则为 6，如果精度为零，则为 1。那么，如果样式 E 的转换将具有 X 的指数：
     *          如果 P > X ≥ ?4，则转换为风格 f 和精度 P ? (X + 1)。否则，转换是样式 e 和精度 P ？ 1.
     *      G   与 g 说明符类似，但使用 E 和 f。
     *      o   该参数被视为一个整数并表示为一个八进制数。
     *      s   参数被处理并显示为字符串。
     *      u   参数被视为整数，并表示为无符号十进制数。
     *      x   该参数被视为一个整数，并以十六进制数（带小写字母）的形式表示。
     *      X   参数被视为整数，并以十六进制数（大写字母）表示。
     *
     *      警告 c 类型说明符忽略填充和宽度
     *      警告 尝试将字符串和宽度说明符与每个字符需要超过一个字节的字符集结合使用可能会导致意外结果
     *
     * string   s
     * integer  d, u, c, o, x, X, b
     * double   g, G, e, E, f, F
     *
     * @param string $format 格式字符串由零个或多个指令组成
     * @param mixed|null ...$vars 可选的指定值。
     * @return mixed 如果只有一个参数传递给此方法，则解析的值将作为数组返回。 否则，如果传递了可选参数，该函数将返回指定值的数量。 可选参数必须通过引用传递。
     */
    public function fscanf($format, &...$vars)
    {
        return parent::fscanf($format, ...$vars);
    }





    /**
     * 以与 flock() 相同的可移植方式锁定或解锁文件。
     *
     * $operation
     *  LOCK_SH 以获取共享锁（读取器）。
     *  LOCK_EX 获取排它锁（写入器）。
     *  LOCK_UN 释放锁（共享或独占）。
     *  如果 flock() 在锁定尝试期间不应阻塞，则还可以将 LOCK_NB 添加为上述操作之一的位掩码。
     *
     *
     * @param int $operation LOCK_SH 以获取共享锁（读取器）。LOCK_EX 获取排它锁（写入器）。LOCK_UN 释放锁（共享或独占）。
     * @param int $wouldBlock 如果锁会阻塞（EWOULDBLOCK errno condition），则设置为 TRUE。
     * @return bool
     */
    public function flock($operation, &$wouldBlock = null):bool
    {
        return parent::flock($operation, $wouldBlock);
    }


    /**
     * 将字段数组作为 CSV 行写入文件。
     * 如果一个字段中包含一个封闭字符，它将通过加倍来转义，除非它前面紧跟一个转义字符 。
     *
     * 如果分隔符或附件参数不是单个字符，则返回 FALSE，并且不将 CSV 行写入文件。
     *
     * @param array $fields 一组值。
     * @param string $separator 可选的分隔符参数设置字段分隔符（仅一个字符）。
     * @param string $enclosure 可选的外壳参数设置字段外壳（仅一个字符）。
     * @param string $escape 可选的转义参数设置转义字符（最多一个字符）。空字符串 ("") 禁用专有转义机制。
     * @return false|int 返回写入字符串的长度或者在失败时返回 FALSE。
     * @throws E_WARNING 如果分隔符或外壳参数不是单个字符，则会发出 E_WARNING 级别错误。
     */
    public function fputcsv( $fields, $separator = ',', $enclosure = '"', $escape = "\\")
    {
        return parent::fputcsv($fields, $separator, $enclosure, $escape);
    }

    /**
     * 从 CSV 格式的文件中获取一行，并返回一个包含读取字段的数组。
     * 此功能会考虑区域设置。 如果 LC_CTYPE 是例如 en_US.UTF-8，这个函数可能会错误地读取单字节编码的文件。
     *
     * 注意：通常一个封闭字符在一个字段中通过加倍来避免； 但是，可以使用转义字符作为替代。 所以对于默认参数值 "" 和 \" 具有相同的含义。除了允许转义包围字符之外，转义字符没有特殊含义；它甚至不打算转义自身。
     *
     * @param string $separator 字段分隔符（仅一个字符）。 默认为逗号或使用 SplFileObject::setCsvControl() 设置的值。
     * @param string $enclosure 字段包围字符（仅一个字符）。 默认为双引号或使用 SplFileObject::setCsvControl() 设置的值。
     * @param string $escape 转义字符（最多一个字符）。 默认为反斜杠 (\) 或使用 SplFileObject::setCsvControl() 设置的值。空字符串 ("") 禁用专有转义机制。
     * @return array|false
     */
    public function fgetcsv($separator = ",", $enclosure = "\"", $escape = "\\")
    {
        return parent::fgetcsv($separator, $enclosure, $escape); // TODO: Change the autogenerated stub
    }

    /**
     * 获取用于解析 CSV 字段的分隔符、外壳和转义字符。
     * @return array 返回一个包含分隔符、外壳和转义字符的索引数组。
     */
    public function getCsvControl(): array
    {
        return parent::getCsvControl();
    }


    /**
     * 收集文件的统计信息。 行为与 fstat() 相同。
     * 返回一个包含文件统计信息的数组； stat() 手册页上详细描述了数组的格式。
     *
     * return array
     * 0    dev device number - 设备名
     * 1    ino inode number - inode 号码
     * 2    mode inode protection mode - inode 保护模式
     * 3    nlink number of links - 被连接数目
     * 4    uid userid of owner - 所有者的用户 id
     * 5    gid groupid of owner- 所有者的组 id
     * 6    rdev device type, if inode device * - 设备类型，如果是 inode 设备的话
     * 7    size size in bytes - 文件大小的字节数
     * 8    atime time of last access (unix timestamp) - 上次访问时间（Unix 时间戳）
     * 9    mtime time of last modification (unix timestamp) - 上次修改时间（Unix 时间戳）
     * 10   ctime time of last change (unix timestamp) - 上次改变时间（Unix 时间戳）
     * 11   blksize blocksize of filesystem IO * - 文件系统 IO 的块大小
     * 12   blocks number of blocks allocated - 所占据块的数目
     *
     * @return array
     */
    public function fstat()
    {
        return parent::fstat();
    }

    /**
     * 从文件的开头寻找以字节为单位的文件中的位置，通过将偏移量添加到由 wherece 指定的位置获得。
     *
     * $whence其中值是：
     * •SEEK_SET - 设置位置等于偏移字节。
     * •SEEK_CUR - 将位置设置为当前位置加上偏移量。
     * •SEEK_END - 将位置设置为文件结尾加上偏移量。
     *
     * @param int $offset 偏移量。 负值可用于在文件中向后移动，这在 SEEK_END 用作 whence 值时很有用。
     * @param int $whence SEEK_SET  SEEK_CUR SEEK_END
     * @return int 如果查找成功则返回 0，否则返回 -1。 请注意，seekpast EOF 不被视为错误。
     */
    public function fseek($offset, $whence = SEEK_SET)
    {
        return parent::fseek($offset, $whence);
    }

    /**
     * 返回表示文件流中当前偏移量的文件指针的位置。
     * @return false|int 以整数形式返回文件指针的位置，错误时返回 FALSE。
     */
    public function ftell()
    {
        return parent::ftell();
    }


    /**
     * 查找文件中的特定行。
     * @param int $line 要查找的从零开始的行号。
     */
    public function seek($line): void
    {
        parent::seek($line);
    }


    /**
     * 将文件倒回到第一行
     */
    public function rewind(): void
    {
        parent::rewind();
    }

    /**
     * Check whether current Directory Iterator position is a valid file.
     * @return bool
     */
    public function valid(): bool
    {
        return parent::valid();
    }

    /**
     * 获取行号
     * 如果 SplFileObject::setMaxLineLen() 用于读取文件的固定长度，则此数字可能无法反映文件中的实际行号。
     * @return int
     */
    public function key(): int
    {
        return parent::key();
    }

    /**
     * 检索文件的当前行。
     * @return array|string 检索文件的当前行。 如果设置了 SplFileObject::READ_CSV 标志，则此方法返回一个包含解析为 CSV 数据的当前行的数组。
     */
    public function current()
    {
        return parent::current();
    }


    /**
     * 前进到文件中的下一行。
     */
    public function next(): void
    {
        parent::next();
    }


    /**
     * 将文件截断为 size 字节。
     * @param int $size 要截断的大小。 如果大小大于文件，则用空字节扩展。如果大小小于文件，额外的数据将丢失
     * @return bool
     */
    public function ftruncate($size):bool
    {
        return parent::ftruncate($size);
    }


    /**
     * SplFileObject 没有子对象，因此此方法返回 NULL。
     * @return void|null
     */
    public function getChildren(): void
    {
        parent::getChildren();
    }

    /**
     * SplFileObject 没有子对象，因此此方法始终返回 FALSE。
     * @return bool fasle
     */
    public function hasChildren():bool
    {
        return parent::hasChildren();
    }

}

