<?php
/**
 * SplHeap 类提供堆的主要功能。
 *
 * 它有两个子集 SplMaxHeap类提供堆的主要功能，将最大值保持在顶部。SplMinHeap类提供堆的主要功能，将最小值保持在顶部。
 *
 */


namespace HappyLin\OldPlugin\SingleClass\SPL\Datastructures;


use \SplHeap;

/**
 * Class Heap
 * SplHeap 类提供堆的主要功能。
 * 它有两个子集 SplMaxHeap类提供堆的主要功能，将最大值保持在顶部。SplMinHeap类提供堆的主要功能，将最小值保持在顶部。
 * @package HappyLin\OldPlugin\SingleClass\SPL\Datastructures
 */
class Heap extends SplHeap
{


    public function __construct()
    {
    }


    /**
     * 比较元素，以便在筛选时将它们正确地放置在堆中
     *
     * 警告
     *  在SplHeap:：compare（）中引发异常会破坏堆并将其置于阻塞状态。您可以通过调用SplHeap:：recoverFromCorruption（）取消阻止它。但是，某些元素可能放置不正确，因此可能会破坏heap属性。
     *
     * 不建议在堆中拥有多个具有相同值的元素。 它们最终会处于任意的相对位置。
     *
     * @param mixed $value1 正在比较的第一个节点的值。
     * @param mixed $value2 正在比较的第二个节点的值。
     * @return int比较结果，如果 value1 大于 value2，则为正整数，如果相等则为 0，否则为负整数。
     */
    public function compare($value1, $value2):int
    {
        // TODO: Implement compare() method.

        return $value2  <=>  $value1;

    }


    /**
     * 从堆的顶部提取一个节点并进行筛选
     * 提取的节点的值。
     *
     * @return mixed
     */
    public function extract()
    {
        return parent::extract();
    }

    /**
     * 从堆的顶部查看节点
     * @return mixed 顶部节点的值。
     */
    public function top()
    {
        return parent::top();
    }

    /**
     * 通过筛选将元素插入堆中
     *
     * @param mixed $value
     * @return mixed
     */
    public function insert($value):void
    {
        parent::insert($value);
    }


    /**
     * 检查堆是否为空
     * @return bool
     */
    public function isEmpty():bool
    {
        return parent::isEmpty();
    }


    /**
     * 如果堆已损坏，则返回TRUE，否则返回FALSE。
     * @return bool
     */
    public function isCorrupted():bool
    {
        return parent::isCorrupted();
    }



    /**
     * 从损坏状态恢复并允许对堆执行进一步操作
     */
    public function recoverFromCorruption()
    {
        parent::recoverFromCorruption(); // TODO: Change the autogenerated stub
    }


    /**
     * 统计元素数
     *
     * @return int 返回堆中的元素数。
     */
    public function count():int
    {
        return parent::count();
    }




    /**
     * 迭代器索引回到开始
     * 这将迭代器倒回到开头
     */
    public function rewind():void
    {
        parent::rewind();
    }


    /**
     * 返回当前数组条目
     * 获取当前的节点。
     *
     * @return mixed 当前的双链接列表节点值
     */
    public function current()
    {
        return parent::current();
    }


    /**
     * 此函数返回当前节点索引
     * @return bool|float|int|string|void|null 当前节点索引。
     */
    public function key()
    {
        return parent::key();
    }

    /**
     * 移至下一个条目
     * 将迭代器移动到下一个节点。
     */
    public function next()
    {
        parent::next();
    }

    /**
     * 检查是否包含更多节点
     * @return bool 如果包含更多节点，则返回TRUE，否则返回FALSE
     */
    public function valid():bool
    {
        return parent::valid();
    }





}

