<?php
/**
 * 此类允许对象作为数组使用。
 * ArrayObject  implements IteratorAggregate  , ArrayAccess  , Serializable  , Countable
 */


namespace HappyLin\OldPlugin\SingleClass\SPL;

use \ArrayObject as AO;

class ArrayObject extends AO
{

    /**
     * ArrayObject constructor.
     * @param mixed $input 输入参数接受数组或对象。
     * @param int $flags 用于控制ArrayObject对象行为的标志。请参阅ArrayObject:：setFlags（）。
     * @param string $iteratorClass 指定将用于ArrayObject对象迭代的类。
     */
    public function __construct($input = array(), $flags = 0, $iteratorClass = "ArrayIterator")
    {
        parent::__construct($input, $flags, $iteratorClass);
    }


    /**
     * 将当前数组与另一个数组或对象交换。
     * @param mixed $input 要与当前数组交换的新数组或对象。
     * @return array 返回旧数组。
     */
    public function exchangeArray($input):array
    {
        return parent::exchangeArray($input);
    }


    /**
     * 从 ArrayObject 实例创建一个新的迭代器。
     * @return \ArrayIterator 来自 ArrayObject 的迭代器。
     */
    public function getIterator(): \ArrayIterator
    {
        return parent::getIterator();
    }

    /**
     * 获取 ArrayObject 的迭代器类名
     * 获取 ArrayObject::getIterator() 使用的数组迭代器的类名。
     * @return string  返回用于迭代此对象的迭代器类名。
     */
    public function getIteratorClass(): string
    {
        return parent::getIteratorClass();
    }

    /**
     * 设置 ArrayObject 的迭代器类名
     * 设置 ArrayObject::getIterator() 使用的数组迭代器的类名。
     * @param string $iteratorClass  迭代此对象时要使用的数组迭代器的类名。
     */
    public function setIteratorClass($iteratorClass): void
    {
        parent::setIteratorClass($iteratorClass);
    }

    /**
     * 新的 ArrayIterator 行为。它采用位掩码或命名常量。强烈鼓励使用命名常量以确保未来版本的兼容性。
     *
     * $flags
     *  ArrayIterator::STD_PROP_LIST
     *      当作为列表（var_dump、foreach 等）访问时，对象的属性具有其正常功能。
     *  ArrayIterator::ARRAY_AS_PROPS
     *      可以通过属性访问条目（读写都支持）。
     *
     * @param string $flags
     */
    public function setFlags($flags): void
    {
        parent::setFlags($flags);
    }

    /**
     * 获取 ArrayIterator 的行为标志。 有关可用标志的列表，请参阅 ArrayIterator::setFlagsmethod。
     * @return int 返回 ArrayIterator 的行为标志
     */
    public function getFlags():int
    {
        return parent::getFlags();
    }




    /**
     * 附加值作为最后一个元素。
     * @param mixed $value
     */
    public function append($value):void
    {
        parent::append($value);
    }



    /**
     * 按值对数组进行排序。
     * @param int $flags
     */
    public function asort($flags = SORT_REGULAR): void
    {
        parent::asort($flags);
    }

    /**
     * 按键对数组进行排序
     * @param int $flags
     */
    public function ksort($flags = SORT_REGULAR): void
    {
        parent::ksort($flags);
    }

    /**
     * 使用“自然顺序”算法按值对条目进行排序
     */
    public function natsort(): void
    {
        parent::natsort();
    }

    /**
     * 使用不区分大小写的“自然顺序”算法按值对条目进行排序。
     */
    public function natcasesort(): void
    {
        parent::natcasesort();
    }


    /**
     * 此方法使用用户定义的比较函数对元素进行排序，以便索引保持它们与其关联的值的相关性。
     * 如果两个成员完全相同，那么它们在排序数组中的相对顺序是未定义的。
     * @param callable $callback callback ( mixed $a, mixed $b ) : int
     */
    public function uasort($callback)
    {
        parent::uasort($callback);
    }

    /**
     * 此方法使用用户提供的比较函数按关键字对元素进行排序。
     * 如果两个成员完全相同，那么它们在排序数组中的相对顺序是未定义的。
     * @param callable $callback callback ( mixed $a, mixed $b ) : int
     */
    public function uksort($callback)
    {
        parent::uksort($callback);
    }

    /**
     * 获取数组的副本
     * @return array
     */
    public function getArrayCopy():array
    {
        return parent::getArrayCopy();
    }





    /**
     * 统计双链接列表中的元素数
     *
     * @return int 返回双链接列表中的元素数。
     */
    public function count():int
    {
        return parent::count();
    }


    /**
     * 检查双链接列表是否包含更多节点
     * @return bool 如果双链接列表包含更多节点，则返回TRUE，否则返回FALSE
     */
    public function valid():bool
    {
        return parent::valid();
    }




    /**
     * 返回请求的 $index 是否存在
     *
     * @param mixed $index 正在检查的索引。
     * @return bool 如果请求的索引存在，则为 TRUE，否则为 FALSE
     */
    public function offsetExists($index)
    {
        return parent::offsetExists($index);
    }


    /**
     * 返回指定 $index 处的值
     *
     * @param mixed $index 索引
     * @return mixed 指定索引处的值
     */
    public function offsetGet($index)
    {
        return parent::offsetGet($index);
    }


    /**
     * 将指定的$index处的值设置为$newval
     *
     *
     * @param mixed $index 正在设置的索引。
     * @param mixed $value 索引的新值。
     * @return void
     */
    public function offsetSet($index, $value):void
    {
        parent::offsetSet($index, $value); // TODO: Change the autogenerated stub
    }


    /**
     * 在指定的$index处删除设置值
     * @param mixed $index
     * @return void
     */
    public function offsetUnset($index): void
    {
        parent::offsetUnset($index); // TODO: Change the autogenerated stub
    }



    /**
     * 序列化存储
     * @return string
     */
    public function serialize(): string
    {
        return parent::serialize();
    }


    /**
     * 反序列化存储
     * 从 SplDoublyLinkedList::serialize() 反序列化存储。
     * @param string $data 序列化的字符串。
     */
    public function unserialize($data) : void
    {
        parent::unserialize($data); // TODO: Change the autogenerated stub
    }


}

