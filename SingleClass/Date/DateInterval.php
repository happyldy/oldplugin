<?php
/**
 *
 *
 */


namespace HappyLin\OldPlugin\SingleClass\Date;


use DateInterval as DI;

/**
 * Class DateInterval
 *
 * 属性
 *  y   多少年。
 *  m   多少月。
 *  d   多少天。
 *  h   多少小时。
 *  i   多少分钟。
 *  s   多少秒。
 *  f   多少微秒。
 *  invert  1 表示一个负的时间周期， 0 表示一个正的时间周期。请参见： DateInterval::format().
 *  days    如果 DateInterval 对象是由 DateTime::diff() 函数创建的，那么它表示开始日期和结束日期之间包含了多少天。否则，days 属性为 FALSE。
 *
 *  在 PHP 5.4.20/5.5.4 之前版本中，此属性不会为 FALSE，而是 -99999。
 *
 * @package HappyLin\OldPlugin\SingleClass\Date
 */
class DateInterval extends DI
{

    /**
     * 例子。两天是P2D。两秒是PT2。六年零五分钟是P6YT5M。
     * 注:
     *  规范也可以表示为日期时间。一年零四天的样本为P0001-00-04T00:00:00。但此格式中的值不能超过给定时间段的滚动点（例如，25小时无效）。这些格式基于»ISO 8601 durationspecification。
     *
     *
     * Y years
     * M months
     * D days
     * W weeks. 这些转换为天，因此不能与D组合。
     * H hours
     * M minutes
     * S seconds
     *
     * DateInterval constructor.
     * @param string $duration 格式以字母P开头，表示“周期”。每个持续时间周期由一个整数值表示，后跟一个周期指示符。如果持续时间包含时间元素，则规范的该部分前面会有字母T。
     * @throws \Exception
     */
    public function __construct($duration)
    {
        parent::__construct($duration);
    }


    /**
     * 设置间隔的格式
     *
     * % Literal % %
     * Y Years, numeric, at least 2 digits with leading 0 01, 03
     * y Years, numeric 1, 3
     * M Months, numeric, at least 2 digits with leading 0 01, 03, 12
     * m Months, numeric 1, 3, 12
     * D Days, numeric, at least 2 digits with leading 0 01, 03, 31
     * d Days, numeric 1, 3, 31
     * a Total number of days as a result of a DateTime::diff() or (unknown) otherwise 4, 18, 8123
     * H Hours, numeric, at least 2 digits with leading 0 01, 03, 23
     * h Hours, numeric 1, 3, 23
     * I Minutes, numeric, at least 2 digits with leading 0 01, 03, 59
     * i Minutes, numeric 1, 3, 59
     * S Seconds, numeric, at least 2 digits with leading 0 01, 03, 57
     * s Seconds, numeric 1, 3, 57
     * F Microseconds, numeric, at least 6 digits with leading0 007701, 052738, 428291
     * f Microseconds, numeric 7701, 52738, 428291
     * R Sign "-" when negative, "+" when positive -, +
     * r Sign "-" when negative, empty when positive -,
     *
     *
     * 例子：
     * $interval = new DateInterval('P2Y4DT6H8M');
     * echo $interval->format('%d days');
     * 输出 4 day
     *
     * @param string $format
     * @return string|void
     */
    public function format($format)
    {
        return parent::format($format); // TODO: Change the autogenerated stub
    }



    /**
     * 从字符串的相关部分设置 DateInterval
     * 使用普通日期解析器并从解析字符串的相关部分设置 DateInterval。
     *
     * 例如：
     * $i = new DateInterval('P1DT12H');
     * $i = DateInterval::createFromDateString('1 day + 12 hours');
     *
     * $i = new DateInterval('PT3600S');
     * $i = DateInterval::createFromDateString('3600 seconds');
     *
     * @param string $datetime 具有相关部分的日期。 具体来说，解析器支持的用于 strtotime() 和 DateTime 的相关格式将用于构造 DateInterval。
     * @return DateInterval
     */
    public static function createFromDateString($datetime)
    {
        return parent::createFromDateString($datetime);
    }


}







